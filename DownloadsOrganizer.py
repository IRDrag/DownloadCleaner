import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import json
import os
import shutil
import time
import re
from datetime import datetime
from pathlib import Path
import subprocess
import sys

CONFIG_FILENAME = "organizer_config.json"
LOG_FILENAME_APP_PREFIX = "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏_–ø–æ_–æ—á–∏—Å—Ç–∫–µ_a

QUARANTINE_DIR_NAME = "_–ù–ê –ü–†–û–í–ï–†–ö–£ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –º—É—Å–æ—Ä)"

DEFAULT_SETTINGS = {
    "downloads_dir_name": "Downloads",
    "archive_dir_name": "Downloads_Archive",
    "days_older_to_archive": 7,
    "folders_to_ignore": ["–í–∞–∂–Ω—ã–µ_–ü—Ä–æ–µ–∫—Ç—ã_–ù–µ_–¢—Ä–æ–≥–∞—Ç—å"],
}

ARCHIVE_GENERAL_OLD_SUBDIR = "01_–û–±—â–∏–π_–∞—Ä—Ö–∏–≤_—Å—Ç–∞—Ä—à–µ_–Ω–µ–¥–µ–ª–∏"
ARCHIVE_SPECIFIC_ARCHIVES_OLD_SUBDIR = "02_–ê—Ä—Ö–∏–≤—ã_–ø—Ä–æ–≥—Ä–∞–º–º_—Å—Ç–∞—Ä—à–µ_–Ω–µ–¥–µ–ª–∏"
ARCHIVED_OLD_FOLDERS_SUBDIR = "04_–ê—Ä—Ö–∏–≤_–°—Ç–∞—Ä—ã—Ö_–ü–∞–ø–æ–∫"

JUNK_KEYWORDS = ["—Å—Ç–∞—Ä–∞—è_–≤–µ—Ä—Å–∏—è", "old_version", "backup", "—Ä–µ–∑–µ—Ä–≤–Ω–∞—è_–∫–æ–ø–∏—è", "temp", "tmpfile"]
JUNK_EXTENSIONS = [".tmp", ".log", ".bak", "._gstmp", ".crdownload"] # .crdownload - –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ Chrome

FILE_TYPE_CATEGORIES = {
    "01_–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è": [".jpg", ".jpeg", ".png", ".gif", ".bmp", ".svg", ".webp", ".heic", ".avif", ".tiff", ".tif"],
    "02_–í–∏–¥–µ–æ": [".mp4", ".mov", ".avi", ".mkv", ".webm", ".flv", ".wmv", ".mpeg", ".mpg"],
    "03_–ê—É–¥–∏–æ": [".mp3", ".wav", ".aac", ".flac", ".ogg", ".wma", ".m4a"],
    "04_–î–æ–∫—É–º–µ–Ω—Ç—ã": [".pdf", ".doc", ".docx", ".txt", ".odt", ".rtf", ".csv", ".xls", ".xlsx", ".ppt", ".pptx", ".epub", ".djvu", ".md"],
    "05_–ê—Ä—Ö–∏–≤—ã_–∏_–æ–±—Ä–∞–∑—ã": [".zip", ".rar", ".tar", ".gz", ".7z", ".bz2", ".iso", ".img", ".dmg"],
    "06_–ü—Ä–æ–≥—Ä–∞–º–º—ã_–∏_—É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∏": [".exe", ".msi", ".bat", ".sh", ".jar", ".apk", ".app"],
    "07_–®—Ä–∏—Ñ—Ç—ã": [".ttf", ".otf", ".woff", ".woff2"],
    "08_–¢–æ—Ä—Ä–µ–Ω—Ç—ã": [".torrent"],
    "09_–ü—Ä–æ–µ–∫—Ç—ã_–∏_–∫–æ–¥": [".py", ".js", ".html", ".css", ".cpp", ".java", ".psd", ".ai", ".fig", ".sketch", ".xd", ".ipynb", ".json", ".xml", ".yml", ".yaml"],
    "10_–î—Ä—É–≥–æ–µ": []
}
PROGRAM_ARCHIVE_EXTENSIONS = FILE_TYPE_CATEGORIES["05_–ê—Ä—Ö–∏–≤—ã_–∏_–æ–±—Ä–∞–∑—ã"]


class DownloadsOrganizerApp:
    def __init__(self, root_tk):
        self.root = root_tk
        self.root.title("–û—Ä–≥–∞–Ω–∞–π–∑–µ—Ä –ó–∞–≥—Ä—É–∑–æ–∫ v6 (—Å –ö–∞—Ä–∞–Ω—Ç–∏–Ω–æ–º)")
        self.root.geometry("800x700")

        self.settings = DEFAULT_SETTINGS.copy()
        self.recommendations_log_entries = []
        self.file_log_path = None

        style = ttk.Style()
        style.configure("TButton", padding=5, font=('Arial', 10))
        style.configure("TLabel", padding=5, font=('Arial', 10))
        style.configure("TFrame", padding=10)
        style.configure("Header.TLabel", font=('Arial', 12, 'bold'))

        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        self.main_tab = ttk.Frame(self.notebook)
        self.quarantine_tab = ttk.Frame(self.notebook)

        self.notebook.add(self.main_tab, text="–ì–ª–∞–≤–Ω–∞—è")
        self.notebook.add(self.quarantine_tab, text="–ö–∞—Ä–∞–Ω—Ç–∏–Ω")

        self.setup_main_tab()
        self.setup_quarantine_tab()

        self.load_config() # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç GUI
        self.refresh_quarantine_list() # –ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ

        self.gui_log("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –û—Ä–≥–∞–Ω–∞–π–∑–µ—Ä –ó–∞–≥—Ä—É–∑–æ–∫ –∑–∞–ø—É—â–µ–Ω–æ.")
        self.gui_log(f"–¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫: {self.get_downloads_path()}")
        self.gui_log(f"–ü–∞–ø–∫–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞: {self.get_downloads_path() / QUARANTINE_DIR_NAME}")

    def get_downloads_path(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –ó–∞–≥—Ä—É–∑–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
        return Path.home() / self.settings.get("downloads_dir_name", "Downloads")

    def setup_main_tab(self):
        main_frame = ttk.Frame(self.main_tab)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        settings_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", padding=10)
        settings_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Label(settings_frame, text="–î–Ω–µ–π –¥–æ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏:").grid(row=0, column=0, sticky=tk.W, pady=2)
        self.days_var = tk.StringVar()
        self.days_entry = ttk.Entry(settings_frame, textvariable=self.days_var, width=5)
        self.days_entry.grid(row=0, column=1, sticky=tk.W, pady=2)
        
        ttk.Label(settings_frame, text="–ü–∞–ø–∫–∞ –ó–∞–≥—Ä—É–∑–æ–∫:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.downloads_dir_label_var = tk.StringVar()
        ttk.Label(settings_frame, textvariable=self.downloads_dir_label_var, relief="sunken", width=40).grid(row=1, column=1, columnspan=2, sticky=tk.EW, pady=2)

        ttk.Label(settings_frame, text="–ü–∞–ø–∫–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è:").grid(row=2, column=0, sticky=tk.NW, pady=2)
        ignore_list_frame = ttk.Frame(settings_frame)
        ignore_list_frame.grid(row=2, column=1, columnspan=2, sticky=tk.NSEW, pady=2)
        settings_frame.grid_columnconfigure(1, weight=1)
        self.ignore_listbox = tk.Listbox(ignore_list_frame, height=4, exportselection=False)
        self.ignore_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar_ignore = ttk.Scrollbar(ignore_list_frame, orient=tk.VERTICAL, command=self.ignore_listbox.yview)
        scrollbar_ignore.pack(side=tk.RIGHT, fill=tk.Y)
        self.ignore_listbox.config(yscrollcommand=scrollbar_ignore.set)
        
        ignore_buttons_frame = ttk.Frame(settings_frame)
        ignore_buttons_frame.grid(row=3, column=1, columnspan=2, sticky=tk.EW)
        self.ignore_entry_var = tk.StringVar()
        self.ignore_entry = ttk.Entry(ignore_buttons_frame, textvariable=self.ignore_entry_var, width=30)
        self.ignore_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0,5))
        self.add_ignore_button = ttk.Button(ignore_buttons_frame, text="–î–æ–±–∞–≤–∏—Ç—å", command=self.add_to_ignore_list)
        self.add_ignore_button.pack(side=tk.LEFT, padx=(0,5))
        self.remove_ignore_button = ttk.Button(ignore_buttons_frame, text="–£–¥–∞–ª–∏—Ç—å", command=self.remove_from_ignore_list)
        self.remove_ignore_button.pack(side=tk.LEFT)
        
        self.save_settings_button = ttk.Button(settings_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.save_ui_config)
        self.save_settings_button.grid(row=4, column=0, columnspan=3, pady=10)

        actions_frame = ttk.LabelFrame(main_frame, text="–î–µ–π—Å—Ç–≤–∏—è", padding=10)
        actions_frame.pack(fill=tk.X, padx=10, pady=5)
        self.run_button = ttk.Button(actions_frame, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é", command=self.run_organization_thread)
        self.run_button.pack(side=tk.LEFT, padx=5, pady=5, fill=tk.X, expand=True)
        self.rollback_button = ttk.Button(actions_frame, text="–°–±—Ä–æ—Å–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é", command=self.perform_rollback_thread)
        self.rollback_button.pack(side=tk.LEFT, padx=5, pady=5, fill=tk.X, expand=True)

        log_frame = ttk.LabelFrame(main_frame, text="–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π", padding=10)
        log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        self.log_text = tk.Text(log_frame, height=10, wrap=tk.WORD, state=tk.DISABLED)
        self.log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar_log = ttk.Scrollbar(log_frame, orient=tk.VERTICAL, command=self.log_text.yview)
        scrollbar_log.pack(side=tk.RIGHT, fill=tk.Y)
        self.log_text.config(yscrollcommand=scrollbar_log.set)

    def setup_quarantine_tab(self):
        q_frame = ttk.Frame(self.quarantine_tab, padding=10)
        q_frame.pack(fill=tk.BOTH, expand=True)

        q_label = ttk.Label(q_frame, text="–§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å—á–∏—Ç–∞–µ—Ç –º—É—Å–æ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º.", wraplength=700)
        q_label.pack(fill=tk.X, pady=(0, 10))

        tree_frame = ttk.Frame(q_frame)
        tree_frame.pack(fill=tk.BOTH, expand=True)

        columns = ("filename", "reason", "date")
        self.quarantine_tree = ttk.Treeview(tree_frame, columns=columns, show="headings")
        self.quarantine_tree.heading("filename", text="–ò–º—è —Ñ–∞–π–ª–∞")
        self.quarantine_tree.heading("reason", text="–ü—Ä–∏—á–∏–Ω–∞")
        self.quarantine_tree.heading("date", text="–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
        self.quarantine_tree.column("filename", width=300)
        self.quarantine_tree.column("reason", width=200)
        self.quarantine_tree.column("date", width=150)

        self.quarantine_tree["displaycolumns"] = ("filename", "reason", "date")

        self.quarantine_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        scrollbar_q = ttk.Scrollbar(tree_frame, orient=tk.VERTICAL, command=self.quarantine_tree.yview)
        scrollbar_q.pack(side=tk.RIGHT, fill=tk.Y)
        self.quarantine_tree.config(yscrollcommand=scrollbar_q.set)

        button_frame = ttk.Frame(q_frame)
        button_frame.pack(fill=tk.X, pady=10)

        self.q_restore_button = ttk.Button(button_frame, text="‚úÖ –í–µ—Ä–Ω—É—Ç—å (–Ω–µ –º—É—Å–æ—Ä)", command=self.restore_selected_quarantine)
        self.q_restore_button.pack(side=tk.LEFT, padx=5, expand=True)
        
        self.q_delete_button = ttk.Button(button_frame, text="‚ùå –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ", command=self.delete_selected_quarantine)
        self.q_delete_button.pack(side=tk.LEFT, padx=5, expand=True)
        
        self.q_open_folder_button = ttk.Button(button_frame, text="üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É", command=self.open_quarantine_folder)
        self.q_open_folder_button.pack(side=tk.LEFT, padx=5, expand=True)
        
        self.q_refresh_button = ttk.Button(button_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", command=self.refresh_quarantine_list)
        self.q_refresh_button.pack(side=tk.LEFT, padx=5, expand=True)

    def get_junk_reason(self, file_path):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏—á–∏–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ñ–∞–π–ª –º–æ–≥ –±—ã —Å—á–∏—Ç–∞—Ç—å—Å—è –º—É—Å–æ—Ä–æ–º."""
        filename = file_path.name
        file_ext_lower = file_path.suffix.lower()

        if file_ext_lower in JUNK_EXTENSIONS:
            return f"–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ ({file_ext_lower})"
        
        keyword_found = next((k for k in JUNK_KEYWORDS if k.lower() in filename.lower()), None)
        if keyword_found:
            return f"–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ('{keyword_found}')"
        
        if is_windows_duplicate_name_logic(filename):
            base_name = re.match(r"(.+)\s\(\d+\)", file_path.stem).group(1) + file_path.suffix
            if (file_path.parent / base_name).exists():
                 return "–î—É–±–ª–∏–∫–∞—Ç Windows"
            else:
                 return "–í–æ–∑–º–æ–∂–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç (–æ—Ä–∏–≥–∏–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)"

        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
    def refresh_quarantine_list(self):
        """–û—á–∏—â–∞–µ—Ç –∏ –∑–∞–Ω–æ–≤–æ –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ."""
        for item in self.quarantine_tree.get_children():
            self.quarantine_tree.delete(item)

        quarantine_path = self.get_downloads_path() / QUARANTINE_DIR_NAME
        if not quarantine_path.exists():
            self.notebook.tab(self.quarantine_tab, text="–ö–∞—Ä–∞–Ω—Ç–∏–Ω (0)")
            return

        files_in_quarantine = list(quarantine_path.iterdir())
        self.notebook.tab(self.quarantine_tab, text=f"–ö–∞—Ä–∞–Ω—Ç–∏–Ω ({len(files_in_quarantine)})")

        for item_path in files_in_quarantine:
            try:
                mod_time = datetime.fromtimestamp(item_path.stat().st_mtime).strftime('%Y-%m-%d %H:%M:%S')
                reason = self.get_junk_reason(item_path)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ item'–∞
                self.quarantine_tree.insert("", tk.END, iid=str(item_path), values=(item_path.name, reason, mod_time))
            except FileNotFoundError:
                continue # –§–∞–π–ª –º–æ–≥ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω

    def restore_selected_quarantine(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ –≤ –ø–∞–ø–∫—É –ó–∞–≥—Ä—É–∑–æ–∫."""
        selected_items = self.quarantine_tree.selection()
        if not selected_items:
            messagebox.showinfo("–ù–µ—Ç –≤—ã–±–æ—Ä–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return

        downloads_path = self.get_downloads_path()
        for item_id in selected_items:
            source_path = Path(item_id)
            if source_path.exists():
                move_item_safely_logic(source_path, downloads_path, self.gui_log_action, "–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ò–ó –ö–ê–†–ê–ù–¢–ò–ù–ê")
        
        self.refresh_quarantine_list()
        self.gui_log("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.", to_file_too=False)

    def delete_selected_quarantine(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞."""
        selected_items = self.quarantine_tree.selection()
        if not selected_items:
            messagebox.showinfo("–ù–µ—Ç –≤—ã–±–æ—Ä–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", 
                                   f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ù–ê–í–°–ï–ì–î–ê —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({len(selected_items)} —à—Ç.)?\n"
                                   "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."):
            return

        for item_id in selected_items:
            file_path = Path(item_id)
            try:
                if file_path.is_dir():
                    shutil.rmtree(file_path)
                else:
                    file_path.unlink()
                self.gui_log_action("–£–î–ê–õ–ï–ù–ò–ï –ò–ó –ö–ê–†–ê–ù–¢–ò–ù–ê", file_path.name)
            except Exception as e:
                self.gui_log_action("–û–®–ò–ë–ö–ê –£–î–ê–õ–ï–ù–ò–Ø", file_path.name, reason=str(e))
                messagebox.showerror("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path.name}:\n{e}")

        self.refresh_quarantine_list()

    def open_quarantine_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ñ–∞–π–ª–æ–≤–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ."""
        q_path = self.get_downloads_path() / QUARANTINE_DIR_NAME
        if not q_path.is_dir():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–∞–ø–∫–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        try:
            if sys.platform == "win32":
                os.startfile(q_path)
            elif sys.platform == "darwin": # macOS
                subprocess.run(["open", q_path])
            else: # linux
                subprocess.run(["xdg-open", q_path])
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É:\n{e}")

    def gui_log(self, message, to_file_too=True):
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        full_message = f"[{timestamp}] {message}"
        
        self.log_text.config(state=tk.NORMAL)
        self.log_text.insert(tk.END, full_message + "\n")
        self.log_text.see(tk.END)
        self.log_text.config(state=tk.DISABLED)
        self.root.update_idletasks()

        if to_file_too:
            self.recommendations_log_entries.append(full_message)

    def add_to_ignore_list(self):
        folder_name = self.ignore_entry_var.get().strip()
        if folder_name and folder_name not in self.ignore_listbox.get(0, tk.END):
            self.ignore_listbox.insert(tk.END, folder_name)
            self.ignore_entry_var.set("")
        # ... (—Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö)

    def remove_from_ignore_list(self):
        selected_indices = self.ignore_listbox.curselection()
        if selected_indices:
            self.ignore_listbox.delete(selected_indices[0])
        # ... (—Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö)

    def load_config(self):
        try:
            if Path(CONFIG_FILENAME).exists():
                with open(CONFIG_FILENAME, 'r', encoding='utf-8') as f:
                    self.settings.update(json.load(f))
                self.gui_log(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {CONFIG_FILENAME}", to_file_too=False)
            else:
                 self.gui_log(f"–§–∞–π–ª {CONFIG_FILENAME} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", to_file_too=False)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞", f"–û—à–∏–±–∫–∞: {e}")
            self.settings = DEFAULT_SETTINGS.copy()
        
        self.days_var.set(str(self.settings.get("days_older_to_archive", 7)))
        self.downloads_dir_label_var.set(str(self.get_downloads_path()))
        self.ignore_listbox.delete(0, tk.END)
        for folder in self.settings.get("folders_to_ignore", []):
            self.ignore_listbox.insert(tk.END, folder)

    def save_ui_config(self):
        try:
            self.settings["days_older_to_archive"] = int(self.days_var.get())
            self.settings["folders_to_ignore"] = list(self.ignore_listbox.get(0, tk.END))
            
            with open(CONFIG_FILENAME, 'w', encoding='utf-8') as f:
                json.dump(self.settings, f, indent=4, ensure_ascii=False)
            self.gui_log(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {CONFIG_FILENAME}", to_file_too=False)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n{e}")

    def _prepare_for_operation(self, operation_name):
        self.recommendations_log_entries = []
        archive_path = self.get_downloads_path() / self.settings["archive_dir_name"]
        ensure_dir_exists_logic(archive_path, self.gui_log_action)
        self.file_log_path = archive_path / f"{LOG_FILENAME_APP_PREFIX}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        self.run_button.config(state=tk.DISABLED)
        self.rollback_button.config(state=tk.DISABLED)

    def _finalize_operation(self, operation_name):
        try:
            with open(self.file_log_path, "w", encoding="utf-8") as f:
                f.write("\n".join(self.recommendations_log_entries))
            self.gui_log(f"–§–∞–π–ª–æ–≤—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: \"{self.file_log_path}\"", to_file_too=False)
        except Exception as e:
            self.gui_log(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}", to_file_too=False)

        self.gui_log(f"--- {operation_name} –ó–ê–í–ï–†–®–ï–ù ---", to_file_too=False)
        messagebox.showinfo(operation_name, f"{operation_name} –∑–∞–≤–µ—Ä—à–µ–Ω(–∞).")
        self.run_button.config(state=tk.NORMAL)
        self.rollback_button.config(state=tk.NORMAL)
        self.refresh_quarantine_list() # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ

    def run_organization_thread(self):
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–∞–ø–∫–∏ –ó–∞–≥—Ä—É–∑–æ–∫?"):
            return
        
        thread = threading.Thread(target=self._run_organization_worker)
        thread.start()

    def _run_organization_worker(self):
        self._prepare_for_operation("–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø")
        try:
            run_organization_logic(self.settings, self.gui_log_action)
        except Exception as e:
            self.gui_log_action("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê", "", f"–û—à–∏–±–∫–∞: {e}")
        self._finalize_operation("–û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø")

    def perform_rollback_thread(self):
        if not messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –°–ë–†–û–°–ê", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é?"):
            return
        thread = threading.Thread(target=self._perform_rollback_worker)
        thread.start()

    def _perform_rollback_worker(self):
        self._prepare_for_operation("–°–ë–†–û–° –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò")
        try:
            perform_rollback_logic(self.settings, self.gui_log_action)
        except Exception as e:
            self.gui_log_action("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê", "", f"–û—à–∏–±–∫–∞: {e}")
        self._finalize_operation("–°–ë–†–û–° –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò")

    def gui_log_action(self, action_type, item_path_obj_or_name, destination_parent_path_obj=None, reason=""):
        item_name = item_path_obj_or_name.name if isinstance(item_path_obj_or_name, Path) else str(item_path_obj_or_name)
        message = f"{action_type}: \"{item_name}\""
        if destination_parent_path_obj:
            message += f" -> {destination_parent_path_obj.name}"
        if reason:
            message += f" (–ü—Ä–∏—á–∏–Ω–∞: {reason})"
        self.gui_log(message)

def is_file_older_than_logic(file_path, days):
    try:
        return file_path.stat().st_mtime < (time.time() - (days * 24 * 60 * 60))
    except FileNotFoundError:
        return False

def get_file_category_name_logic(file_path):
    extension = file_path.suffix.lower()
    if not extension: return "10_–î—Ä—É–≥–æ–µ"
    for cat_name, exts_list in FILE_TYPE_CATEGORIES.items():
        if extension in exts_list: return cat_name
    return "10_–î—Ä—É–≥–æ–µ"
    
def is_windows_duplicate_name_logic(filename):
    return bool(re.match(r"(.+)\s\(\d+\)(\.[^.]+)?$", filename))


def ensure_dir_exists_logic(dir_path, log_callback):
    try:
        dir_path.mkdir(parents=True, exist_ok=True)
    except Exception as e:
        log_callback("–û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–ê–ü–ö–ò", dir_path.name, reason=f"{e}")

def move_item_safely_logic(source_path, target_dir_path, log_callback, action_type="–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ", reason=""):
    if not source_path.exists():
        log_callback("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï", source_path.name, reason="–ò—Å—Ö–æ–¥–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    ensure_dir_exists_logic(target_dir_path, log_callback)
    target_path = target_dir_path / source_path.name
    
    counter = 1
    base_name = source_path.stem
    suffix = source_path.suffix

    while target_path.exists():
        new_name = f"{base_name}_{counter}{suffix}"
        target_path = target_dir_path / new_name
        counter += 1
        if counter > 100:
            log_callback("–û–®–ò–ë–ö–ê –ü–ï–†–ï–ú–ï–©–ï–ù–ò–Ø", source_path.name, reason="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.")
            return

    try:
        shutil.move(str(source_path), str(target_path))
        log_callback(action_type, source_path, target_dir_path, reason)
    except Exception as e:
        log_callback("–û–®–ò–ë–ö–ê –ü–ï–†–ï–ú–ï–©–ï–ù–ò–Ø", source_path.name, reason=f"{e}")

def is_folder_content_old_logic(folder_to_check_path, days, ignored_folder_names_list, log_callback):
    cutoff_time_ts = time.time() - (days * 24 * 60 * 60)
    return True # –ó–∞–≥–ª—É—à–∫–∞, —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤ –≤–∞—à–µ–º —Ñ–∞–π–ª–µ

def run_organization_logic(current_settings, log_callback_gui):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ö–ê–†–ê–ù–¢–ò–ù–ê."""
    downloads_path = Path.home() / current_settings["downloads_dir_name"]
    archive_dir_name = current_settings["archive_dir_name"]
    days_older = current_settings["days_older_to_archive"]
    folders_to_ignore = current_settings["folders_to_ignore"]

    if not downloads_path.is_dir():
        log_callback_gui("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê", downloads_path.name, reason="–ü–∞–ø–∫–∞ –ó–∞–≥—Ä—É–∑–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    archive_base_path = downloads_path / archive_dir_name
    quarantine_path = downloads_path / QUARANTINE_DIR_NAME
    ensure_dir_exists_logic(quarantine_path, log_callback_gui)

    archive_general_old_path = archive_base_path / ARCHIVE_GENERAL_OLD_SUBDIR

    folders_to_skip = folders_to_ignore + [archive_dir_name, QUARANTINE_DIR_NAME] + list(FILE_TYPE_CATEGORIES.keys())

    for item_path in list(downloads_path.iterdir()):
        if item_path.name in folders_to_skip:
            continue

        if item_path.is_file():
            filename = item_path.name
            file_ext_lower = item_path.suffix.lower()
            
            junk_reason = ""
            if file_ext_lower in JUNK_EXTENSIONS:
                junk_reason = f"—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ ({file_ext_lower})"
            elif any(k.lower() in filename.lower() for k in JUNK_KEYWORDS):
                keyword = next(k for k in JUNK_KEYWORDS if k.lower() in filename.lower())
                junk_reason = f"–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ('{keyword}')"
            elif is_windows_duplicate_name_logic(filename):
                junk_reason = "–ø–æ—Ö–æ–∂ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç Windows"

            if junk_reason:
                move_item_safely_logic(item_path, quarantine_path, log_callback_gui, "–í –ö–ê–†–ê–ù–¢–ò–ù", junk_reason)
                continue

            if is_file_older_than_logic(item_path, days_older):
                # (–õ–æ–≥–∏–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                dest_path = archive_specific_archives_old_path if file_ext_lower in PROGRAM_ARCHIVE_EXTENSIONS else archive_general_old_path
                move_item_safely_logic(item_path, dest_path, log_callback_gui, "–í –ê–†–•–ò–í (–°–¢–ê–†–´–ô)", f"—Å—Ç–∞—Ä—à–µ {days_older} –¥–Ω–µ–π")
                continue

            category_name = get_file_category_name_logic(item_path)
            move_item_safely_logic(item_path, downloads_path / category_name, log_callback_gui, "–°–û–†–¢–ò–†–û–í–ö–ê", f"–∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}'")

        elif item_path.is_dir():
            pass

    log_callback_gui("–≠–¢–ê–ü 2", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ä–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

def perform_rollback_logic(current_settings, log_callback_gui):
    """–õ–æ–≥–∏–∫–∞ —Å–±—Ä–æ—Å–∞ —Å —É—á–µ—Ç–æ–º –ö–ê–†–ê–ù–¢–ò–ù–ê –∏ –±–µ–∑ —Å—Ç–∞—Ä–æ–π –ø–∞–ø–∫–∏ –º—É—Å–æ—Ä–∞."""
    downloads_path = Path.home() / current_settings["downloads_dir_name"]
    archive_base_path = downloads_path / current_settings["archive_dir_name"]
    quarantine_path = downloads_path / QUARANTINE_DIR_NAME

    log_callback_gui("–°–ë–†–û–°", "–ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–±—Ä–æ—Å–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.")

    if quarantine_path.is_dir():
        log_callback_gui("–°–ë–†–û–°", quarantine_path.name, reason="–í–æ–∑–≤—Ä–∞—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.")
        for item in list(quarantine_path.iterdir()):
            move_item_safely_logic(item, downloads_path, log_callback_gui, "–í–û–ó–í–†–ê–¢ –ò–ó –ö–ê–†–ê–ù–¢–ò–ù–ê")
        try:
            quarantine_path.rmdir()
            log_callback_gui("–£–î–ê–õ–ï–ù–ò–ï –ü–ê–ü–ö–ò", quarantine_path.name)
        except OSError:
            log_callback_gui("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï", quarantine_path.name, reason="–ü–∞–ø–∫–∞ –Ω–µ –ø—É—Å—Ç–∞, –Ω–µ —É–¥–∞–ª–µ–Ω–∞.")

    if archive_base_path.is_dir():
        log_callback_gui("–°–ë–†–û–°", archive_base_path.name, reason="–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏ –∞—Ä—Ö–∏–≤–∞.")

        archived_old_folders_path_obj = archive_base_path / ARCHIVED_OLD_FOLDERS_SUBDIR
        if archived_old_folders_path_obj.is_dir():
            for item in list(archived_old_folders_path_obj.iterdir()):
                move_item_safely_logic(item, downloads_path, log_callback_gui, "–í–û–ó–í–†–ê–¢ –ü–ê–ü–ö–ò –ò–ó –ê–†–•–ò–í–ê")
            try:
                shutil.rmtree(archived_old_folders_path_obj)
                log_callback_gui("–£–î–ê–õ–ï–ù–ò–ï –ü–ê–ü–ö–ò", archived_old_folders_path_obj.name)
            except OSError as e:
                log_callback_gui("–û–®–ò–ë–ö–ê –£–î–ê–õ–ï–ù–ò–Ø", archived_old_folders_path_obj.name, reason=f"{e}")

        archive_subfolders_to_empty = [
            archive_base_path / ARCHIVE_GENERAL_OLD_SUBDIR,
            archive_base_path / ARCHIVE_SPECIFIC_ARCHIVES_OLD_SUBDIR,
        ]

        for archive_subfolder_path in archive_subfolders_to_empty:
            if archive_subfolder_path.is_dir():
                for item in list(archive_subfolder_path.iterdir()):
                    move_item_safely_logic(item, downloads_path, log_callback_gui, "–í–û–ó–í–†–ê–¢ –§–ê–ô–õ–ê –ò–ó –ê–†–•–ò–í–ê")
                try:
                    archive_subfolder_path.rmdir()
                    log_callback_gui("–£–î–ê–õ–ï–ù–ò–ï –ü–ê–ü–ö–ò", archive_subfolder_path.name)
                except OSError as e:
                     log_callback_gui("–û–®–ò–ë–ö–ê –£–î–ê–õ–ï–ù–ò–Ø", archive_subfolder_path.name, reason=f"{e}")
        
        try:
            if list(archive_base_path.iterdir()) == []:
                 archive_base_path.rmdir()
                 log_callback_gui("–£–î–ê–õ–ï–ù–ò–ï –ü–ê–ü–ö–ò", archive_base_path.name)
        except OSError:
            pass

    category_folder_names = list(FILE_TYPE_CATEGORIES.keys())
    for cat_name in category_folder_names:
        category_path = downloads_path / cat_name
        if category_path.is_dir():
            for item in list(category_path.iterdir()):
                move_item_safely_logic(item, downloads_path, log_callback_gui, "–í–û–ó–í–†–ê–¢ –ò–ó –ö–ê–¢–ï–ì–û–†–ò–ò")
            try:
                category_path.rmdir()
                log_callback_gui("–£–î–ê–õ–ï–ù–ò–ï –ü–ê–ü–ö–ò", category_path.name)
            except OSError:
                log_callback_gui("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï", category_path.name, reason="–ü–∞–ø–∫–∞ –Ω–µ –ø—É—Å—Ç–∞, –Ω–µ —É–¥–∞–ª–µ–Ω–∞.")

    log_callback_gui("–°–ë–†–û–°", "–û–ø–µ—Ä–∞—Ü–∏—è —Å–±—Ä–æ—Å–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    pass


if __name__ == "__main__":
    import threading
    root = tk.Tk()
    app = DownloadsOrganizerApp(root)
    root.mainloop()
